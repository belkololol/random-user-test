{"version":3,"sources":["serviceWorker.js","redux-store.js","User.jsx","Autocomplete.jsx","Table.jsx","Preloader.jsx","UserCard.jsx","Users.jsx","App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","SET_USERS","TOGGLE_PRELOADER","TOGGLE_SORT","CHANGE_COUNT_USERS","DELETE_USER","SET_INITIAL_USERS","FILTER_USER","VIEW_USER_CARD","HIDE_USER_CARD","initialState","users","initialUsers","isLoading","countUsers","localStorage","getItem","isSort","userCard","usersReducer","state","action","type","count","boolean","filter","user","id","obj","column","toLowerCase","includes","value","store","createStore","applyMiddleware","thunk","setUsers","setInitialUsers","togglePreloader","deleteUser","hideUserCard","connect","viewUserCard","props","isActiveUserCard","onClick","name","gender","email","className","e","stopPropagation","disabled","Autocomplete","filterContent","arrayFilter","options","hiddenList","bind","choiceUser","deleteFilter","toggleHiddenList","onBlur","this","getOptionLabel","onChange","setState","target","item","onSelect","hidden","setTimeout","onFocus","map","index","length","React","Component","Table","sortData","toggleSort","sort","a","b","nameA","nameB","filterUser","Preloader","src","avatar","alt","cell","city","Users","changeCountUsers","getUsers","setItem","placeholder","dispatch","fetch","response","json","correctedUsers","results","login","uuid","title","first","last","picture","large","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc73f6eb.chunk.js","sourcesContent":["/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import {applyMiddleware, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const SET_USERS = 'SET_USERS';\r\nexport const TOGGLE_PRELOADER = 'TOGGLE_PRELOADER';\r\nexport const TOGGLE_SORT = 'TOGGLE_SORT';\r\nexport const CHANGE_COUNT_USERS = 'CHANGE_COUNT_USERS';\r\nexport const DELETE_USER = 'DELETE_USER';\r\nexport const SET_INITIAL_USERS = 'SET_INITIAL_USERS';\r\nexport const FILTER_USER = 'FILTER_USER';\r\nexport const VIEW_USER_CARD = 'VIEW_USER_CARD';\r\nexport const HIDE_USER_CARD = 'HIDE_USER_CARD';\r\n\r\nlet initialState = {\r\n    users: [],\r\n    initialUsers: [],\r\n    isLoading: false,\r\n    countUsers: localStorage.getItem('countUsers') || \"\",\r\n    isSort: false,\r\n    userCard: null,\r\n};\r\n\r\nfunction usersReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users,\r\n            }\r\n        case SET_INITIAL_USERS:\r\n            return {\r\n                ...state,\r\n                initialUsers: action.users,\r\n            }\r\n        case TOGGLE_PRELOADER:\r\n            return {\r\n                ...state,\r\n                isLoading: !state.isLoading\r\n            }\r\n        case CHANGE_COUNT_USERS:\r\n            return {\r\n                ...state,\r\n                countUsers: action.count\r\n            }\r\n        case TOGGLE_SORT:\r\n            return {\r\n                ...state,\r\n                isSort: action.boolean\r\n            }\r\n        case DELETE_USER:\r\n            return {\r\n                ...state,\r\n                users: state.users.filter(user => user.id !== action.id)\r\n            }\r\n        case FILTER_USER:\r\n            return {\r\n                ...state,\r\n                users: state.initialUsers.filter(user => (user[action.obj.column]).toLowerCase().includes(action.obj.value.toLowerCase()))\r\n            }\r\n        case VIEW_USER_CARD:\r\n            return {\r\n                ...state,\r\n                userCard: action.userCard\r\n            }\r\n        case HIDE_USER_CARD:\r\n            return {\r\n                ...state,\r\n                userCard: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const store = createStore(usersReducer, applyMiddleware(thunk));\r\n\r\nexport function setUsers(users) {\r\n    return {type: SET_USERS, users};\r\n}\r\n\r\nexport function setInitialUsers(users) {\r\n    return {type: SET_INITIAL_USERS, users};\r\n}\r\n\r\nexport function togglePreloader(action) {\r\n    return {type: TOGGLE_PRELOADER, action};\r\n}\r\n\r\nexport function changeCountUsers(count) {\r\n    return {type: CHANGE_COUNT_USERS, count};\r\n}\r\n\r\nexport function toggleSort(boolean) {\r\n    return {type: TOGGLE_SORT, boolean}\r\n}\r\n\r\nexport function deleteUser(id) {\r\n    return {type: DELETE_USER, id}\r\n}\r\n\r\nexport function filterUser(obj) {\r\n    return {\r\n        type: FILTER_USER, obj\r\n    }\r\n}\r\n\r\nexport function viewUserCard (userCard) {\r\n    return {\r\n        type: VIEW_USER_CARD, userCard\r\n    }\r\n}\r\n\r\nexport function hideUserCard (action) {\r\n    return {\r\n        type: HIDE_USER_CARD, action\r\n    }\r\n}\r\n\r\nexport const getUsers = (count) => async (dispatch) => {\r\n    dispatch(togglePreloader());\r\n    let response = await fetch(`https://randomuser.me/api/?results=${count}`);\r\n    let users = await response.json();\r\n    let correctedUsers = users.results.map((user) => {\r\n        return {\r\n            id: user.login.uuid,\r\n            name: `${user.name.title} ${user.name.first} ${user.name.last}`,\r\n            gender: user.gender === \"male\" ? \"мужской\" : \"женский\",\r\n            email: user.email,\r\n            avatar: user.picture.large,\r\n            cell: user.cell,\r\n            city: user.location.city\r\n        }\r\n    })\r\n    dispatch(setInitialUsers(correctedUsers));\r\n    dispatch(setUsers(correctedUsers));\r\n    dispatch(togglePreloader());\r\n}\r\n\r\nexport default usersReducer;\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {deleteUser, viewUserCard} from \"./redux-store\";\r\n\r\nfunction User(props) {\r\n\r\n    const {user, deleteUser, viewUserCard, userCard} = props;\r\n    const isActiveUserCard = !!userCard;\r\n    return (\r\n        <tr onClick={() => viewUserCard(user)}>\r\n            <td>{user.name}</td>\r\n            <td>{user.gender}</td>\r\n            <td>{user.email}</td>\r\n            <td>\r\n                <button className=\"delete\" onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    deleteUser(user.id)\r\n                }} disabled={isActiveUserCard}/>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    userCard: state.userCard\r\n})\r\n\r\nexport default connect(mapStateToProps, {deleteUser, viewUserCard})(User);\r\n","import React from \"react\";\r\n\r\nclass Autocomplete extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            filterContent: \"\",\r\n            arrayFilter: [...props.options],\r\n            hiddenList: true\r\n        }\r\n        this.filter = this.filter.bind(this);\r\n        this.choiceUser = this.choiceUser.bind(this);\r\n        this.deleteFilter = this.deleteFilter.bind(this);\r\n        this.toggleHiddenList = this.toggleHiddenList.bind(this);\r\n        this.onBlur = this.onBlur.bind(this);\r\n    }\r\n\r\n    filter(e) {\r\n        const {getOptionLabel, options, onChange} = this.props;\r\n        this.setState({\r\n            filterContent: e.target.value,\r\n            arrayFilter: options.filter(item => getOptionLabel(item).toLowerCase().includes(e.target.value.toLowerCase())),\r\n        })\r\n        onChange(e.target.value)\r\n    }\r\n\r\n    choiceUser(item) {\r\n        const {getOptionLabel, onSelect} = this.props;\r\n        this.setState({\r\n            filterContent: getOptionLabel(item),\r\n        })\r\n        onSelect(getOptionLabel(item))\r\n    }\r\n\r\n    deleteFilter() {\r\n        const {getOptionLabel, options, onSelect} = this.props;\r\n        this.setState({\r\n            filterContent: '',\r\n            arrayFilter: options.filter(item => getOptionLabel(item).includes('')),\r\n        })\r\n        onSelect('')\r\n    }\r\n\r\n    toggleHiddenList(hidden) {\r\n        this.setState({\r\n            hiddenList: hidden\r\n        })\r\n    }\r\n\r\n    onBlur() {\r\n        setTimeout(() => this.toggleHiddenList(true), 200)\r\n    }\r\n\r\n    render() {\r\n        const {filterContent, hiddenList, arrayFilter} = this.state;\r\n        const {getOptionLabel} = this.props;\r\n        return (\r\n            <div className=\"filter-container\">\r\n                <input className=\"filter\" type=\"text\"\r\n                       onChange={this.filter}\r\n                       onFocus={() => this.toggleHiddenList(false)}\r\n                       onBlur={this.onBlur}\r\n                       value={filterContent}/>\r\n                <ul className={`${hiddenList ? \"hidden\" : ''} list-filter`}>\r\n                    {arrayFilter.map((item, index) => {\r\n                        return <li onClick={() => this.choiceUser(item)} key={index}>{getOptionLabel(item)}</li>\r\n                    })}\r\n                </ul>\r\n                {filterContent.length > 0\r\n                    ? <button className=\"delete-filter\" onClick={this.deleteFilter}/>\r\n                    : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Autocomplete;\r\n","import React from \"react\";\r\nimport './App.css';\r\nimport User from \"./User\";\r\nimport Autocomplete from \"./Autocomplete\";\r\nimport {deleteUser, filterUser, setUsers, toggleSort} from \"./redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Table extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.sortData = this.sortData.bind(this);\r\n        this.deleteUser = this.deleteUser.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {toggleSort} = this.props;\r\n        toggleSort(false);\r\n    }\r\n\r\n    sortData() {\r\n        const {toggleSort, setUsers, users} = this.props;\r\n        const sortedUsers = [...users].sort(function (a, b) {\r\n            const nameA = a.name.toLowerCase(), nameB = b.name.toLowerCase();\r\n            if (nameA < nameB) return -1;\r\n            if (nameA > nameB) return 1;\r\n            return 0;\r\n        });\r\n        setUsers(sortedUsers);\r\n        toggleSort(true);\r\n    }\r\n\r\n    deleteUser(id) {\r\n        this.props.deleteUser(id);\r\n    }\r\n\r\n    render() {\r\n        const {users, countUsers, isSort, initialUsers, filterUser} = this.props;\r\n        if (!countUsers) return null;\r\n        return (\r\n            <div>\r\n                <table className=\"table-users\">\r\n                    <tbody>\r\n                    <tr>\r\n                        <th>\r\n                            <span>Имя</span>\r\n                            <button className={`${isSort ? \"active\" : ''} sort`} onClick={this.sortData}/>\r\n                        </th>\r\n                        <th>Пол</th>\r\n                        <th>Email</th>\r\n                        <th/>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <Autocomplete options={initialUsers}\r\n                                          getOptionLabel={user => user.name}\r\n                                          onSelect={(value) => filterUser({value, column: \"name\"})}\r\n                                          onChange={(value) => filterUser({value, column: \"name\"})}/>\r\n                        </td>\r\n                        <td>\r\n                            <Autocomplete options={[\"женский\", \"мужской\"]}\r\n                                          getOptionLabel={user => user}\r\n                                          onSelect={(value) => filterUser({value, column: \"gender\"})}\r\n                                          onChange={(value) => filterUser({value, column: \"gender\"})}/>\r\n                        </td>\r\n                        <td>\r\n                            <Autocomplete options={initialUsers}\r\n                                          getOptionLabel={user => user.email}\r\n                                          onSelect={(value) => filterUser({value, column: \"email\"})}\r\n                                          onChange={(value) => filterUser({value, column: \"email\"})}/>\r\n                        </td>\r\n                        <td/>\r\n                    </tr>\r\n                    {users.map((user) => {\r\n                        return <User user={user} key={user.id}/>;\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    users: state.users,\r\n    initialUsers: state.initialUsers,\r\n    countUsers: state.countUsers,\r\n});\r\n\r\nexport default connect(mapStateToProps, {setUsers, toggleSort, deleteUser, filterUser})(Table);\r\n\r\n","import React from \"react\";\r\nimport './App.css';\r\n\r\nfunction Preloader() {\r\n    return (\r\n        <div className=\"preloader-container\">\r\n            <div className=\"preloader\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preloader;\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {hideUserCard} from \"./redux-store\";\r\n\r\nfunction UserCard(props) {\r\n    const {userCard, hideUserCard} = props;\r\n    return (\r\n        <div className=\"user-card-wrapper\">\r\n            <div className=\"user-card\">\r\n                <div className=\"user-card-container\">\r\n                    <div className=\"user-avatar\">\r\n                        <img src={`${userCard.avatar}`} alt=\"avatar\"/>\r\n                    </div>\r\n                    <div className=\"user-info\">\r\n                        <ul>\r\n                            <li className=\"user-name\">{userCard.name} </li>\r\n                            <li><b>Gender:</b> {userCard.gender} </li>\r\n                            <li><b>Email:</b> {userCard.email} </li>\r\n                            <li><b>Cell:</b> {userCard.cell} </li>\r\n                            <li><b>City:</b> {userCard.city} </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button className=\"close\" onClick={hideUserCard}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    userCard: state.userCard\r\n})\r\n\r\nexport default connect(mapStateToProps, {hideUserCard})(UserCard);\r\n","import './App.css';\r\nimport Table from \"./Table\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUsers, changeCountUsers,} from \"./redux-store\";\r\nimport Preloader from \"./Preloader\";\r\nimport UserCard from \"./UserCard\";\r\n\r\nclass Users extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.changeCountUsers = this.changeCountUsers.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {getUsers, countUsers} = this.props;\r\n        getUsers(countUsers);\r\n    }\r\n\r\n    changeCountUsers(e) {\r\n        const {getUsers, changeCountUsers} = this.props;\r\n        changeCountUsers(e.target.value);\r\n        getUsers(e.target.value);\r\n        localStorage.setItem('countUsers', e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            countUsers,\r\n            isLoading,\r\n            userCard,\r\n        } = this.props;\r\n        return (\r\n            <div className=\"users-container\">\r\n                <input className=\"count-users\" type=\"text\" onChange={this.changeCountUsers}\r\n                       value={countUsers} placeholder=\"Сколько пользователей показать?\"/>\r\n                {isLoading ? <Preloader/> : <Table/>}\r\n                {userCard && <UserCard/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isLoading: state.isLoading,\r\n    countUsers: state.countUsers,\r\n    userCard: state.userCard\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUsers, changeCountUsers})(Users);\r\n","import './App.css';\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {hideUserCard} from \"./redux-store\";\r\nimport UsersContainer from \"./Users\";\r\n\r\nfunction App(props) {\r\n    const {userCard, hideUserCard} = props;\r\n    return (\r\n        <div className=\"app-container\">\r\n            <h1 className=\"title\">Список пользователей</h1>\r\n            <UsersContainer/>\r\n            {userCard && <div className=\"background-modal\" onClick={hideUserCard}/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    userCard: state.userCard\r\n});\r\n\r\nexport default connect(mapStateToProps, {hideUserCard})(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport {store} from \"./redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}